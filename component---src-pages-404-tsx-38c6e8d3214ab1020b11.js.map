{"version":3,"sources":["webpack:///./src/components/seo/seo.tsx","webpack:///./src/pages/404.tsx"],"names":["SEO","props","siteMetadata","useStaticQuery","site","title","description","url","author","meta","keywords","image","siteTitle","siteDescription","siteUrl","siteAuthor","siteImage","metaData","name","content","join","concat","Helmet","htmlAttributes","lang","link","rel","href","Container","styled","div","theme","colors","blue","darkblue","NotFoundPage","subpage","to","src","alt"],"mappings":"sMAmBMA,EAA0B,SAACC,GAC/B,IAeQC,EAfKC,yBAAe,cAeEC,KAAtBF,aAGNG,EAOEH,EAPFG,MACAC,EAMEJ,EANFI,YACAC,EAKEL,EALFK,IACAC,EAIEN,EAJFM,OAtBuC,EA0BrCN,EAHFO,YAvBuC,MAuBhC,GAvBgC,IA0BrCP,EAFFQ,gBAxBuC,MAwB5B,GAxB4B,EAyBvCC,EACET,EADFS,MAEIC,EAAYX,EAAMI,OAASA,EAC3BQ,EAAkBZ,EAAMK,aAAeA,EACvCQ,EAAUb,EAAMM,KAAOA,EACvBQ,EAAad,EAAMO,QAAUA,EAC7BQ,EAAYf,EAAMU,OAASA,EAE3BM,EAAW,CACf,CACEC,KAAM,YACNC,QAASL,GAEX,CACEI,KAAM,cACNC,QAASN,GAEX,CACEK,KAAM,QACNC,QAASH,GAEX,CACEE,KAAM,SACNC,QAASL,GAEX,CACEI,KAAM,UACNC,QAAS,WAEX,CACED,KAAM,WACNC,QAASP,GAEX,CACEM,KAAM,iBACNC,QAASN,GAEX,CACEK,KAAM,WACNC,QAASH,GAEX,CACEE,KAAM,eACNC,QAAS,uBAEX,CACED,KAAM,kBACNC,QAASJ,GAEX,CACEG,KAAM,gBACNC,QAASP,GAEX,CACEM,KAAM,sBACNC,QAASN,GAEX,CACEK,KAAM,gBACNC,QAASH,GAEX,CACEE,KAAM,WACNC,QAxDiB,sBAAIT,GAAJ,CAAcT,EAAMS,WAAUU,KAAK,OA0DtDC,OAAOZ,GAYT,OACE,kBAACa,EAAA,EAAD,CACEC,eAAgB,CAAEC,KAAM,MACxBnB,MAAOO,EAEPH,KAAMQ,EACNQ,KAhBa,CACf,CACEC,IAAK,gBACLC,KAAM,eAER,CACED,IAAK,mBACLC,KAAM,kCC9GNC,EAAYC,IAAOC,IAAV,wEAAGD,CAAH,2UAQF,qBAAGE,MAAkBC,OAAOC,QAK5B,qBAAGF,MAAkBC,OAAOE,YAU5B,qBAAGH,MAAkBC,OAAOE,YA4B1BC,UAjBgB,kBAC7B,kBAAC,IAAD,CAAQC,SAAO,GACb,kBAACR,EAAD,KACE,kBAAC,EAAD,CAAKvB,MAAM,mBACX,6BACE,yCACA,wEACA,kBAAC,OAAD,CAAMgC,GAAG,KACP,kBAAC,IAAD,MADF,YAKF,yBAAKC,IAAI,sCAAsCC,IAAI","file":"component---src-pages-404-tsx-38c6e8d3214ab1020b11.js","sourcesContent":["import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\n\r\ntype MetaItem = {\r\n  name: string;\r\n  content: string;\r\n};\r\n\r\ntype SEOProps = {\r\n  title?: string;\r\n  description?: string;\r\n  url?: string;\r\n  author?: string;\r\n  keywords?: string[];\r\n  meta?: MetaItem[];\r\n  image?: string;\r\n};\r\n\r\nconst SEO: React.FC<SEOProps> = (props) => {\r\n  const data = useStaticQuery(graphql`\r\n    {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n          description\r\n          author\r\n          url\r\n          keywords\r\n          image\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const { siteMetadata } = data.site;\r\n\r\n  const {\r\n    title,\r\n    description,\r\n    url,\r\n    author,\r\n    meta = [],\r\n    keywords = [],\r\n    image,\r\n  } = siteMetadata;\r\n  const siteTitle = props.title || title;\r\n  const siteDescription = props.description || description;\r\n  const siteUrl = props.url || url;\r\n  const siteAuthor = props.author || author;\r\n  const siteImage = props.image || image;\r\n  const siteKeywords = [...keywords, props.keywords].join(\",\");\r\n  const metaData = [\r\n    {\r\n      name: \"canonical\",\r\n      content: siteUrl,\r\n    },\r\n    {\r\n      name: \"description\",\r\n      content: siteDescription,\r\n    },\r\n    {\r\n      name: \"image\",\r\n      content: siteImage,\r\n    },\r\n    {\r\n      name: \"og:url\",\r\n      content: siteUrl,\r\n    },\r\n    {\r\n      name: \"og:type\",\r\n      content: \"article\",\r\n    },\r\n    {\r\n      name: \"og:title\",\r\n      content: siteTitle,\r\n    },\r\n    {\r\n      name: \"og:description\",\r\n      content: siteDescription,\r\n    },\r\n    {\r\n      name: \"og:image\",\r\n      content: siteImage,\r\n    },\r\n    {\r\n      name: \"twitter:card\",\r\n      content: \"summary_large_image\",\r\n    },\r\n    {\r\n      name: \"twitter:creator\",\r\n      content: siteAuthor,\r\n    },\r\n    {\r\n      name: \"twitter:title\",\r\n      content: siteTitle,\r\n    },\r\n    {\r\n      name: \"twitter:description\",\r\n      content: siteDescription,\r\n    },\r\n    {\r\n      name: \"twitter:image\",\r\n      content: siteImage,\r\n    },\r\n    {\r\n      name: \"keywords\",\r\n      content: siteKeywords,\r\n    },\r\n  ].concat(meta);\r\n\r\n  const linkData = [\r\n    {\r\n      rel: \"shortcut icon\",\r\n      href: \"favicon.ico\",\r\n    },\r\n    {\r\n      rel: \"apple-touch-icon\",\r\n      href: \"icons/apple-touch-icon.png\",\r\n    },\r\n  ];\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{ lang: \"en\" }}\r\n      title={siteTitle}\r\n      // titleTemplate={`%s | ${siteTitle}`}\r\n      meta={metaData}\r\n      link={linkData}\r\n    />\r\n  );\r\n};\r\n\r\nexport { SEO };\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FaUndo } from \"react-icons/fa\";\n\nimport { Link } from \"gatsby\";\nimport { Layout } from \"../components/layout\";\nimport { SEO } from \"../components/seo\";\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 60% 40%;\n  min-height: 80vh;\n  justify-items: center;\n  place-items: center;\n\n  h3 {\n    color: ${({ theme }) => theme.colors.blue};\n    position: relative;\n    bottom: 10px;\n  }\n  h1 {\n    color: ${({ theme }) => theme.colors.darkblue};\n    font-size: 3em;\n  }\n  img {\n    width: 100%;\n  }\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: ${({ theme }) => theme.colors.darkblue};\n    margin-top: 20px;\n    :hover {\n      text-decoration: underline;\n    }\n    svg {\n      margin-right: 8px;\n    }\n  }\n`;\n\nconst NotFoundPage: React.FC = () => (\n  <Layout subpage>\n    <Container>\n      <SEO title=\"404: Not found\" />\n      <div>\n        <h1>Oops! 404</h1>\n        <h3>You just hit a route that doesn&#39;t exist.</h3>\n        <Link to=\"/\">\n          <FaUndo />\n          Go Home\n        </Link>\n      </div>\n      <img src=\"images/undraw_feeling_blue_4b7q.svg\" alt=\"404 image\" />\n    </Container>\n  </Layout>\n);\n\nexport default NotFoundPage;\n"],"sourceRoot":""}