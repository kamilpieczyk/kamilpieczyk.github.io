{"componentChunkName":"component---src-pages-blog-tsx","path":"/blog/","result":{"data":{"allStrapiPosts":{"edges":[{"node":{"id":"Posts_3","content":"## So is there any way to keep the project in frames?\n\nOf course, there are many possibilities to do this. To be honest how many developers there are across the world, that many ways to do so we can find, but the most important thing is - if you already started a project with one way - Do not change it, keep writing your code as you started. Never-ever change your project frames in the middle, because as a result, you'll have a mess that you tried to avoid.\n  In this post, I would like to show you my way to keep my projects in nice shape. As an example, I going to show you my standard react project structure using the gatsby.js framework, so let's do it!\n\n## Creating a new folder structure\n\nFirst of all - we need a new folder for our project. To create this I'll be using my console - it's more comfortable to do everything in one place. So let's create a new folder and then go toward it:\n![step_1.png](http://kamilpieczyk.tk:1337/uploads/step_1_ea161af62e.png)\n\nThen I use the command: gatsby new, to start a new gatsby project. If you don't have gatsby CLI installed globally to do this use the command\n\n```npm install -g gatsby-cli```\n\nand then answer a few questions that gatsby ask you. I've installed styled-components during this process.\n![step_2.png](http://kamilpieczyk.tk:1337/uploads/step_2_36c863fddf.png)\n\nOnce when gatsby-CLI finished its work let's go into our new project using cd <our new name>, in my case cd example.\nNext hit the command ``` npm run develop``` and after a few seconds, your new project will be ready on port 8000.\n\n![step_3.png](http://kamilpieczyk.tk:1337/uploads/step_3_9a597f9072.png)\n\nSo let's have a look at our folder structure. In this article, the most important folder is src - where we will keep our components and pages. As you noticed folder pages already exist, so let's create another one called components:\n\n![step_4.png](http://kamilpieczyk.tk:1337/uploads/step_4_1aa10e2678.png)\n\n## Frames for our new project\n\nIn this paragraph, I would like to finally show my way how I keep my projects in the right order. To introduce my way I'll create with you a whole component ready to use later.\nFirst step: create a new folder for our new component inside the components folder. In this case, I'll call it a header.\n\n![step_5.png](http://kamilpieczyk.tk:1337/uploads/step_5_ce4f4feca0.png)\n\n2nd step, I create a few new files: index.tsx, header.view.tsx and header.styles.tsx\n![step_6.png](http://kamilpieczyk.tk:1337/uploads/step_6_7a872d7ccb.png)\n\nInside of my index file, I'll keep my components logic layer, inside of the header.view.tsx I keep my presentation layer - so simply said my view, and inside my header.styles.tsx I'll keep my styles using styled-components.\nPermit to see my styles file, where I create my Container div.\n\n![step_7.png](http://kamilpieczyk.tk:1337/uploads/step_7_c652247b93.png)\n![step_9.png](http://kamilpieczyk.tk:1337/uploads/step_9_26960934b5.png)\n![step_8.png](http://kamilpieczyk.tk:1337/uploads/step_8_35dce8a4cf.png)\n\n","introduction":"Always when you start a new project need to choose a few standards for the new app. One of them is the way how you hold your new project in frames. If the project is kept in disorder and chaos your code mates and most probably yourself may have many problems in the future to control what is what.","published_at":"2021-03-11T12:01:01.070Z","strapiId":3,"title":"How I keep my project structure easy to maintenance","mainImage":{"publicURL":"/static/1b48818bd7e182549d6e98c20062339f/6bff8307699e9c07b890450e4f8d619e.jpg"}}},{"node":{"id":"Posts_1","content":"At the beginning of this article, I have to warn you - this is not another type-script tutorial, so if you count for it this is a very good moment to stop reading and save up your time. But if you would like to know why I CONSTANTLY prefer to code with TS over plain JS this text is directed straight to you.\n\n## What type-script really is and what isn’t. \nTS is a relatively new programming language developed and maintained by Microsoft Corporation, so we can be perfectly sure that it’s a professional and consistent one. It’s compilable to plain JS, so it needs a compiler to make this works. TS IS NOT A JAVA-SCRIPT FRAMEWORK! and it’s not a part of this language - it’s a completely new language but in its structure, it’s based on java-script. In short, We can say that this is JS on steroids. Why? Because it adds a bunch of new stuff to JS.\n\nThe most important difference is that manual typing in plain JS is not allowed - language assigns the type of a variable automatically and it’s not constant - can be converted to another type anytime. Type-script changes everything, the types are added manually and cannot be simply converted.\n\n![js-var.png](http://kamilpieczyk.tk:1337/uploads/js_var_e00b159d97.png)\n>  in plain JS this is allowed.\n\n![ts-var.png](http://kamilpieczyk.tk:1337/uploads/ts_var_028d01d1eb.png)\n> in type-script, this is not allowed and the compiler is going to show a type error\n\n![ts-correct-var.png](http://kamilpieczyk.tk:1337/uploads/ts_correct_var_d2e0eb6867.png)\n> this is correct typing for this case\n\nOf course, those examples are only very simple types - TS gives to us much more advanced types and interfaces, but as I said at the top of this article this is not another TS tutorial.\n\n## Why manual typing is better than the JS way?\n\nIf you have ever used TS know the answer - but then you won’t read this text so let’s get into it. \nJust imagine the situation when you work as a part of shared with other engineers project. One of your colleagues has been written a function using plain JS and you need to use this function. What are you going to do now? Of course, there is a need to open a code block where the function is located and check how to use it correctly. And now the same situation, but your code mate has been written the function using type-script. What are you going to do now? Just use it without checking the code block. Why? Because there is information about all of the types and what will be returned - you got all that you need, your time has been saved!\nThis is what TS does in practice - save time and prevents using the wrong type in future.\nIt is not helpful only when working as a part of the team - even when working for our own and need to use a function which was written a long time ago.\n\n## Conclusion - so why should I use TS?\n\nConclusions are simple - it will save you and your team time! And to be honest - if you know java-script in ES6 or above there are not that many new things to learn. If you are a fast learner there is a possibility to get the new knowledge in a maximum of 2 days - but the benefits are priceless.\nIf you work on your own on a small project and you’re able to remember each function/class/component - it’s better to stay with common JS. In this case, there is no reason to send a tank for one soldier, but otherwise, I always prefer to use TS over JS.","introduction":"Many young javascript developers have got this question in their mind. Why we should use TypeScript over JavaScript? The answer to this question is not that obvious as everyone expects especially when even for the time being many huge start-ups still uses js over ts.","published_at":"2021-03-06T10:52:52.871Z","strapiId":1,"title":"Why TypeScript is better than plain JavaScript?","mainImage":{"publicURL":"/static/1b48818bd7e182549d6e98c20062339f/6bff8307699e9c07b890450e4f8d619e.jpg"}}},{"node":{"id":"Posts_2","content":"## Let’s begin with my terminal appearance 👩🏻‍💻\n\nI used to work with Linux terminal for many years and I was very happy about this OS. There is only one big “but” - Linux is not supported by Adobe and many other must-have programs. Of course, there is a load of alternatives, but (again) they are not that good as original apps - to be absolutely honest with you - they just suck. Whenever I had to design something or prepare a mockup I was pulling my hair out of my head. So I decided that I have to switch back to windows or mac.\n\tApple computers are quite expensive and for me, they are not worth their price, so as a result, I bought a 13” windows laptop with a 2K display and 100% sRGB coverage. At this moment I had 2 options - install WSL and use bash (with for me was the perfect option) or stay with Powershell. Firstly I’ve chosen WSL and bash, but after a few days I noticed that this is so uncomfortable and honestly Powershell is enough for my purpose, so I’ve switched back to Powershell.\n\tPowershell on its own is pretty ugly, so the very first thing I did was Windows Terminal installation. Once when I had my new terminal application I started to prettify it.\nFirstly I’ve installed new fonts and setup in my settings.json file. To open the config file press ctrl +, (comma) and also set acrylic opacity to 80%. \n\n![powershel-settings.png](http://kamilpieczyk.tk:1337/uploads/powershel_settings_ba215c87ea.png)\n\nMy next step to make my console pretty was installing oh-my-posh. If you are a bash user you probably know oh-my-zsh for any other people - this is something awesome for Linux/Mac console, something that was not available for windows users for many years. It just makes every bash console rocks 🤘🏻.\n\n![images.jpg](http://kamilpieczyk.tk:1337/uploads/images_425f4c7d8d.jpg)\n> oh my zsh console appearance\n\nNow windows users can have the same or even better with oh-my-posh. There is no need to write here an installation guide because on the project website you can find the best tutorial which will guide you on how to do this in a few very easy steps. just visit [their website](https://ohmyposh.dev/docs/installation). The theme I use is AgnosterPlus. See below how my terminal looks like:\n\n![oh-my-posh.png](http://kamilpieczyk.tk:1337/uploads/oh_my_posh_7aa7b35248.png)\n\n## Let’s make the VS Code fly to the sky! 🚀\n\nThanks to Microsoft developers and a huge community VSC is the most customizable code editor on the market. To make VS-Code pretty you don’t need so much time, most of the changes are very easy to do, everything that you need is to install extensions in most cases. I usually install first some basic extensions to work better with my code like ESLint,  ES7 React/Redux/GraphQL/React-Native snippets, JavaScript and TypeScript Nightly, GraphQL, Prettier, DOTEnv, Docker, GitHistory, Styled-Components Extractor, EditorConfig for Visual Studio Code, etc.. those extensions are not for prettify your code editor but they are must-have for frontend/backend developer work. \nThe first extension that makes a difference is Vibrancy - this will add a frosted glass transparency effect which is known from macOS or Windows native apps (acrylic blur). But remember, after installation of it your VSC will increase RAM usage.\n\n![screenshot.png](http://kamilpieczyk.tk:1337/uploads/screenshot_dfff487ca2.png)\n> Vibrancy addon\n\nAnother one that I use is vscode-icons-mac. This is a package of icons that appear by folder/filename.\n\n![dark.png](http://kamilpieczyk.tk:1337/uploads/dark_dbd7a97fd4.png)\n> vscode-mac-icons\n\nAnd my last extension is “Operator Mono Dark Theme” which is my daily use theme. I’ve chosen this one because I also use the Victor Mono font family that is a free and (in my opinion) better replacement for the Operator Mono font family. You can get this font here: \n[https://rubjo.github.io/victor-mono/](https://rubjo.github.io/victor-mono/)\n\nThe result of all these extensions and font looks like on the picture below: \n\n![my vs code.png](http://kamilpieczyk.tk:1337/uploads/my_vs_code_e992bb155c.png)\n\n","introduction":"In this article, I would like to share with all of you guys my favourite VSC and terminal configuration. Because I rather prefer a very esthetic design and my daily use apps have to be good-looking - so only if I can prettify ugly app I definitely do!","published_at":"2021-03-06T11:09:56.815Z","strapiId":2,"title":"My VSC and terminal configuration","mainImage":{"publicURL":"/static/ea1b48841f1565cff7d91a1681fde705/308770105d446630e285cb9f87873c3d.jpg"}}},{"node":{"id":"Posts_4","content":"If you are a young dad as I am and wondering how to find time for both baby care and code this post is addressed straight to you. When my daughter was born 6 months ago I thought that I'll never again find time for home coding and guess what - I was wrong! After 3 months I found my way how to deal with it and would like to share it with you - so let's make a cup of coffee and read!","introduction":"If you are a young dad as I am and wondering how to find time for both baby care and code this post is addressed straight to you. When my daughter was born 6 months ago I thought that I'll never again find time for home coding and guess what - I was wrong! After 3 months I found my way how to deal with it and would like to share it with you - so let's make a cup of coffee and read!","published_at":"2021-03-13T11:23:10.555Z","strapiId":4,"title":"How to be a daddy and still have time for coding","mainImage":{"publicURL":"/static/db21c8c4b2ad443f178c7cab4dfef87b/3d535b5821551687f0ac69760469ed24.jpg"}}}]}},"pageContext":{}},"staticQueryHashes":[]}