{"componentChunkName":"component---src-components-post-index-tsx","path":"/Posts_1","result":{"pageContext":{"title":"Why TypeScript is better than plain JavaScript?","id":"Posts_1","content":"At the beginning of this article, I have to warn you - this is not another type-script tutorial, so if you count for it this is a very good moment to stop reading and save up your time. But if you would like to know why I CONSTANTLY prefer to code with TS over plain JS this text is directed straight to you.\n\n## What type-script really is and what isn’t. \nTS is a relatively new programming language developed and maintained by Microsoft Corporation, so we can be perfectly sure that it’s a professional and consistent one. It’s compilable to plain JS, so it needs a compiler to make this works. TS IS NOT A JAVA-SCRIPT FRAMEWORK! and it’s not a part of this language - it’s a completely new language but in its structure, it’s based on java-script. In short, We can say that this is JS on steroids. Why? Because it adds a bunch of new stuff to JS.\n\nThe most important difference is that manual typing in plain JS is not allowed - language assigns the type of a variable automatically and it’s not constant - can be converted to another type anytime. Type-script changes everything, the types are added manually and cannot be simply converted.\n\n![js-var.png](http://kamilpieczyk.tk:1337/uploads/js_var_e00b159d97.png)\n>  in plain JS this is allowed.\n\n![ts-var.png](http://kamilpieczyk.tk:1337/uploads/ts_var_028d01d1eb.png)\n> in type-script, this is not allowed and the compiler is going to show a type error\n\n![ts-correct-var.png](http://kamilpieczyk.tk:1337/uploads/ts_correct_var_d2e0eb6867.png)\n> this is correct typing for this case\n\nOf course, those examples are only very simple types - TS gives to us much more advanced types and interfaces, but as I said at the top of this article this is not another TS tutorial.\n\n## Why manual typing is better than the JS way?\n\nIf you have ever used TS know the answer - but then you won’t read this text so let’s get into it. \nJust imagine the situation when you work as a part of shared with other engineers project. One of your colleagues has been written a function using plain JS and you need to use this function. What are you going to do now? Of course, there is a need to open a code block where the function is located and check how to use it correctly. And now the same situation, but your code mate has been written the function using type-script. What are you going to do now? Just use it without checking the code block. Why? Because there is information about all of the types and what will be returned - you got all that you need, your time has been saved!\nThis is what TS does in practice - save time and prevents using the wrong type in future.\nIt is not helpful only when working as a part of the team - even when working for our own and need to use a function which was written a long time ago.\n\n## Conclusion - so why should I use TS?\n\nConclusions are simple - it will save you and your team time! And to be honest - if you know java-script in ES6 or above there are not that many new things to learn. If you are a fast learner there is a possibility to get the new knowledge in a maximum of 2 days - but the benefits are priceless.\nIf you work on your own on a small project and you’re able to remember each function/class/component - it’s better to stay with common JS. In this case, there is no reason to send a tank for one soldier, but otherwise, I always prefer to use TS over JS.","introduction":"Many young javascript developers have got this question in their mind. Why we should use TypeScript over JavaScript? The answer to this question is not that obvious as everyone expects especially when even for the time being many huge start-ups still uses js over ts.","publicationDate":"2021-03-06T10:52:52.871Z","strapiID":1,"image":"/static/1b48818bd7e182549d6e98c20062339f/6bff8307699e9c07b890450e4f8d619e.jpg"}},"staticQueryHashes":[]}