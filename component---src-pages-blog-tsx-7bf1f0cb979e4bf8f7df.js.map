{"version":3,"sources":["webpack:///./src/components/blog/blog.styles.tsx","webpack:///./src/components/blog/blog.view.tsx","webpack:///./src/components/blog/index.tsx","webpack:///./src/pages/blog.tsx"],"names":["Container","styled","section","theme","colors","darkblue","PostWrapper","div","breakpoints","Latest","article","image","transparentDarkblue","blue","Button","button","Post","lightgrey","ReadBtn","link","center","style","width","display","alignItems","justifyContent","href","View","p","posts","mainImage","publicURL","title","introduction","id","map","post","index","key","strapiId","src","alt","split","slice","join","Blog","data","allStrapiPosts","edges","el","node","Helmet","name","content"],"mappings":"8KAEaA,EAAYC,IAAOC,QAAV,wEAAGD,CAAH,oEAIT,qBAAGE,MAAkBC,OAAOC,YAK5BC,EAAcL,IAAOM,IAAV,0EAAGN,CAAH,kOAQC,qBAAGE,MAAkBK,YAAY,MAM7CC,EAASR,IAAOS,QAAV,qEAAGT,CAAH,0bAIC,qBAAGU,SAYL,qBAAGR,MAAkBC,OAAOQ,uBAKrB,qBAAGT,MAAkBK,YAAY,MAK3C,qBAAGL,MAAkBC,OAAOS,QAS9BC,EAASb,IAAOc,OAAV,qEAAGd,CAAH,yPACH,qBAAGE,MAAkBC,OAAOS,QAIjC,qBAAGV,MAAkBC,OAAOC,YAe1BW,EAAOf,IAAOS,QAAV,mEAAGT,CAAH,uQACD,qBAAGE,MAAkBC,OAAOa,aAc/B,qBAAGd,MAAkBC,OAAOS,QAK5B,qBAAGV,MAAkBC,OAAOC,YC7FnCa,EAAwD,SAAC,GAAD,IAC5DC,EAD4D,EAC5DA,KACAC,EAF4D,EAE5DA,OAF4D,OAI5D,0BACEC,MAAO,CACLC,MAAO,OACPC,QAAS,OACTC,WAAY,SACZC,eAAgBL,EAAS,SAAW,aAGtC,uBAAGM,KAAMP,GACP,kBAACL,EAAD,KACE,kBAAC,IAAD,MADF,sBA2CSa,EAhCuB,SAACC,GACrC,OACE,kBAAC5B,EAAD,KACE,kBAACM,EAAD,KACE,kBAACG,EAAD,CAAQE,MAAOiB,EAAEC,MAAM,GAAGC,UAAUC,WAClC,iCACE,4BAAKH,EAAEC,MAAM,GAAGG,OAChB,2BAAIJ,EAAEC,MAAM,GAAGI,cACf,kBAAC,EAAD,CAASd,KAAI,IAAMS,EAAEC,MAAM,GAAGK,OAGlC,6BACGN,EAAEC,MAAMM,KAAI,SAACC,EAAMC,GAClB,OAAc,IAAVA,EAAoB,KAGpB,kBAACrB,EAAD,CAAMsB,IAAKD,EAAQD,EAAKG,UACtB,yBAAKC,IAAKJ,EAAKN,UAAUC,UAAWU,IAAKL,EAAKJ,QAC9C,4BAAKI,EAAKJ,OACV,2BACGI,EAAKH,aAAaS,MAAM,KAAKC,MAAM,EAAG,IAAIC,KAAK,KADlD,OAGA,kBAAC,EAAD,CAASxB,QAAM,EAACD,KAAI,IAAMiB,EAAKF,aCtClCW,EANuB,SAACjB,GACrC,OAAOD,EAAK,CACVE,MAAOD,EAAEC,SCyDEgB,UAnBuB,SAACjB,GACrC,IAAMC,EAAyBD,EAAEkB,KAAKC,eAAeC,MAAMb,KACzD,SAACc,GAAD,OAAQA,EAAGC,QAGb,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,KACE,iEACA,0BACEC,KAAK,cACLC,QAAQ,yCAGZ,kBAAC,EAAD,CAAexB,MAAOA","file":"component---src-pages-blog-tsx-7bf1f0cb979e4bf8f7df.js","sourcesContent":["import styled, { css } from \"styled-components\";\n\nexport const Container = styled.section`\n  min-height: 80vh;\n  width: 100vw;\n  a {\n    color: ${({ theme }) => theme.colors.darkblue};\n    text-decoration: none;\n  }\n`;\n\nexport const PostWrapper = styled.div`\n  display: grid;\n  grid-template-areas: \"head head head\" \"post post post\";\n  div {\n    grid-area: post;\n    display: grid;\n    grid-template-columns: 33.3333% 33.3333% 33.3333%;\n    padding: 25px 10px;\n    @media (max-width: ${({ theme }) => theme.breakpoints[1]}px) {\n      grid-template-columns: 100%;\n    }\n  }\n`;\n\nexport const Latest = styled.article<{ image: string }>`\n  width: 100%;\n  height: 80vh;\n  overflow: hidden;\n  background: url(${({ image }) => image});\n  background-attachment: fixed;\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  grid-area: head;\n  section {\n    width: 50%;\n    backdrop-filter: blur(8px);\n    background: ${({ theme }) => theme.colors.transparentDarkblue};\n    padding: 30px;\n    padding-bottom: 80px;\n    border-radius: 8px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints[1]}px) {\n      width: 90%;\n    }\n\n    h2 {\n      color: ${({ theme }) => theme.colors.blue};\n      margin-bottom: 20px;\n    }\n    p {\n      margin-bottom: 20px;\n    }\n  }\n`;\n\nexport const Button = styled.button`\n  background: ${({ theme }) => theme.colors.blue};\n  border-radius: 8px;\n  border: 1px solid transparent;\n  padding: 10px;\n  color: ${({ theme }) => theme.colors.darkblue};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  bottom: 30px;\n  left: 50%;\n  transform: translateX(-50%);\n\n  cursor: pointer;\n  svg {\n    margin-right: 6px;\n  }\n`;\n\nexport const Post = styled.article`\n  background: ${({ theme }) => theme.colors.lightgrey};\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 10px;\n  padding-bottom: 80px;\n  position: relative;\n  img {\n    width: 100%;\n  }\n\n  h2 {\n    color: ${({ theme }) => theme.colors.blue};\n    text-align: center;\n    margin: 10px 0;\n  }\n  p {\n    color: ${({ theme }) => theme.colors.darkblue};\n    width: 70%;\n    margin-bottom: 20px;\n  }\n`;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { FaBookReader } from \"react-icons/fa\";\n\nimport { Container, Latest, Post, Button, PostWrapper } from \"./blog.styles\";\nimport { PostInterface } from \"../../pages/blog\";\n\nconst ReadBtn: React.FC<{ link: string; center?: boolean }> = ({\n  link,\n  center,\n}) => (\n  <span\n    style={{\n      width: \"100%\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: center ? \"center\" : \"flex-end\",\n    }}\n  >\n    <a href={link}>\n      <Button>\n        <FaBookReader /> read this post\n      </Button>\n    </a>\n  </span>\n);\n\ninterface ViewInterface {\n  posts: PostInterface[];\n}\n\nconst View: React.FC<ViewInterface> = (p) => {\n  return (\n    <Container>\n      <PostWrapper>\n        <Latest image={p.posts[0].mainImage.publicURL}>\n          <section>\n            <h2>{p.posts[0].title}</h2>\n            <p>{p.posts[0].introduction}</p>\n            <ReadBtn link={`/${p.posts[0].id}`} />\n          </section>\n        </Latest>\n        <div>\n          {p.posts.map((post, index) => {\n            if (index === 0) return null;\n            else\n              return (\n                <Post key={index + post.strapiId}>\n                  <img src={post.mainImage.publicURL} alt={post.title} />\n                  <h2>{post.title}</h2>\n                  <p>\n                    {post.introduction.split(\" \").slice(0, 30).join(\" \")}...\n                  </p>\n                  <ReadBtn center link={`/${post.id}`} />\n                </Post>\n              );\n          })}\n        </div>\n      </PostWrapper>\n    </Container>\n  );\n};\n\nexport default View;\n","import React from \"react\";\n\nimport View from \"./blog.view\";\nimport { PostInterface } from \"../../pages/blog\";\n\ninterface BlogInterface {\n  posts: PostInterface[];\n}\n\nconst Blog: React.FC<BlogInterface> = (p) => {\n  return View({\n    posts: p.posts,\n  });\n};\n\nexport default Blog;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { Helmet } from \"react-helmet\";\n\nimport { Layout } from \"../components/layout\";\nimport BlogComponent from \"../components/blog\";\n\nexport interface PostInterface {\n  id: string;\n  content: string;\n  introduction: string;\n  published_at: string;\n  strapiId: string;\n  title: string;\n  mainImage: {\n    publicURL: string;\n  };\n}\n\ninterface BlogInterface {\n  data: {\n    allStrapiPosts: {\n      edges: {\n        node: PostInterface;\n      }[];\n    };\n  };\n}\n\nexport const query = graphql`\n  query PostsQuery {\n    allStrapiPosts {\n      edges {\n        node {\n          id\n          content\n          introduction\n          published_at\n          strapiId\n          title\n          mainImage {\n            publicURL\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Blog: React.FC<BlogInterface> = (p) => {\n  const posts: PostInterface[] = p.data.allStrapiPosts.edges.map(\n    (el) => el.node\n  );\n\n  return (\n    <Layout>\n      <Helmet>\n        <title>Blog - Kamil Pieczyk Portfolio</title>\n        <meta\n          name=\"description\"\n          content=\"Kamil Pieczyks portfolio blog page.\"\n        />\n      </Helmet>\n      <BlogComponent posts={posts} />\n    </Layout>\n  );\n};\n\nexport default Blog;\n"],"sourceRoot":""}